// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat/chat.proto

package chat

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_767a49518b351716, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type MessageResult struct {
	IsSuccess            bool     `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageResult) Reset()         { *m = MessageResult{} }
func (m *MessageResult) String() string { return proto.CompactTextString(m) }
func (*MessageResult) ProtoMessage()    {}
func (*MessageResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_767a49518b351716, []int{1}
}

func (m *MessageResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageResult.Unmarshal(m, b)
}
func (m *MessageResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageResult.Marshal(b, m, deterministic)
}
func (m *MessageResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageResult.Merge(m, src)
}
func (m *MessageResult) XXX_Size() int {
	return xxx_messageInfo_MessageResult.Size(m)
}
func (m *MessageResult) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageResult.DiscardUnknown(m)
}

var xxx_messageInfo_MessageResult proto.InternalMessageInfo

func (m *MessageResult) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func init() {
	proto.RegisterType((*Message)(nil), "chat.Message")
	proto.RegisterType((*MessageResult)(nil), "chat.MessageResult")
}

func init() { proto.RegisterFile("chat/chat.proto", fileDescriptor_767a49518b351716) }

var fileDescriptor_767a49518b351716 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0xce, 0x48, 0x2c,
	0xd1, 0x07, 0x11, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x2c, 0x20, 0xb6, 0x94, 0x74, 0x7a,
	0x7e, 0x7e, 0x7a, 0x4e, 0xaa, 0x3e, 0x58, 0x2c, 0xa9, 0x34, 0x4d, 0x3f, 0x35, 0xb7, 0xa0, 0xa4,
	0x12, 0xa2, 0x44, 0x49, 0x99, 0x8b, 0xdd, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x55, 0x48, 0x82,
	0x8b, 0x3d, 0x17, 0xc2, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x71, 0x95, 0xf4, 0xb8,
	0x78, 0xa1, 0x8a, 0x82, 0x52, 0x8b, 0x4b, 0x73, 0x4a, 0x84, 0x64, 0xb9, 0xb8, 0x32, 0x8b, 0xe3,
	0x8b, 0x4b, 0x93, 0x93, 0x53, 0x8b, 0x8b, 0xc1, 0xaa, 0x39, 0x82, 0x38, 0x33, 0x8b, 0x83, 0x21,
	0x02, 0x46, 0x25, 0x5c, 0x2c, 0xce, 0x19, 0x89, 0x25, 0x42, 0x86, 0x5c, 0xdc, 0x01, 0xf9, 0xc5,
	0x25, 0x30, 0x0b, 0x78, 0xf5, 0xc0, 0x6e, 0x83, 0x72, 0xa5, 0x84, 0x51, 0xb8, 0x50, 0x93, 0x2d,
	0xb9, 0xf8, 0x82, 0x52, 0x93, 0x53, 0x33, 0xcb, 0x52, 0x61, 0xba, 0xc4, 0xf4, 0x20, 0xee, 0xd7,
	0x83, 0xb9, 0x5f, 0xcf, 0x15, 0xe4, 0x7e, 0x29, 0x54, 0xd3, 0x0c, 0x18, 0x93, 0xd8, 0xc0, 0x0a,
	0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xb0, 0xeb, 0x8a, 0x07, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatClient interface {
	PostMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageResult, error)
	ReceiveMessage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Chat_ReceiveMessageClient, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) PostMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageResult, error) {
	out := new(MessageResult)
	err := c.cc.Invoke(ctx, "/chat.Chat/PostMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ReceiveMessage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Chat_ReceiveMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chat_serviceDesc.Streams[0], "/chat.Chat/ReceiveMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatReceiveMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chat_ReceiveMessageClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatReceiveMessageClient struct {
	grpc.ClientStream
}

func (x *chatReceiveMessageClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServer is the server API for Chat service.
type ChatServer interface {
	PostMessage(context.Context, *Message) (*MessageResult, error)
	ReceiveMessage(*empty.Empty, Chat_ReceiveMessageServer) error
}

// UnimplementedChatServer can be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (*UnimplementedChatServer) PostMessage(ctx context.Context, req *Message) (*MessageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostMessage not implemented")
}
func (*UnimplementedChatServer) ReceiveMessage(req *empty.Empty, srv Chat_ReceiveMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_PostMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).PostMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/PostMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).PostMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ReceiveMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).ReceiveMessage(m, &chatReceiveMessageServer{stream})
}

type Chat_ReceiveMessageServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chatReceiveMessageServer struct {
	grpc.ServerStream
}

func (x *chatReceiveMessageServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostMessage",
			Handler:    _Chat_PostMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveMessage",
			Handler:       _Chat_ReceiveMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat/chat.proto",
}
